// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/enum.proto

package com.solano.grpc.common.enumeration;

public final class Enum {
  private Enum() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   **
   * 服务类型
   * </pre>
   *
   * Protobuf enum {@code com.solano.grpc.common.enumeration.GrpcServiceTypeEnum}
   */
  public enum GrpcServiceTypeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     **
     * 上游服务：任务生产者
     * </pre>
     *
     * <code>TASK_GENERATOR = 0;</code>
     */
    TASK_GENERATOR(0),
    /**
     * <pre>
     **
     * 下游服务：任务消费者
     * </pre>
     *
     * <code>TASK_WORKER = 1;</code>
     */
    TASK_WORKER(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     **
     * 上游服务：任务生产者
     * </pre>
     *
     * <code>TASK_GENERATOR = 0;</code>
     */
    public static final int TASK_GENERATOR_VALUE = 0;
    /**
     * <pre>
     **
     * 下游服务：任务消费者
     * </pre>
     *
     * <code>TASK_WORKER = 1;</code>
     */
    public static final int TASK_WORKER_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static GrpcServiceTypeEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static GrpcServiceTypeEnum forNumber(int value) {
      switch (value) {
        case 0: return TASK_GENERATOR;
        case 1: return TASK_WORKER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<GrpcServiceTypeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        GrpcServiceTypeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<GrpcServiceTypeEnum>() {
            public GrpcServiceTypeEnum findValueByNumber(int number) {
              return GrpcServiceTypeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.solano.grpc.common.enumeration.Enum.getDescriptor().getEnumTypes().get(0);
    }

    private static final GrpcServiceTypeEnum[] VALUES = values();

    public static GrpcServiceTypeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private GrpcServiceTypeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.solano.grpc.common.enumeration.GrpcServiceTypeEnum)
  }

  /**
   * <pre>
   **
   * 服务实例类型
   * </pre>
   *
   * Protobuf enum {@code com.solano.grpc.common.enumeration.GrpcInstanceTypeEnum}
   */
  public enum GrpcInstanceTypeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     **
     * 上游服务 task-generator 1-9999
     * </pre>
     *
     * <code>GENERATOR = 0;</code>
     */
    GENERATOR(0),
    /**
     * <pre>
     **
     * 产线任务生产者
     * </pre>
     *
     * <code>GENERATOR_PIPELINE = 1;</code>
     */
    GENERATOR_PIPELINE(1),
    /**
     * <pre>
     **
     *单趟雷达SLAM
     * </pre>
     *
     * <code>GENERATOR_SINGLEPASS_LIDAR_SLAM = 2;</code>
     */
    GENERATOR_SINGLEPASS_LIDAR_SLAM(2),
    /**
     * <pre>
     **
     * 用于WEB测试
     * </pre>
     *
     * <code>GENERATOR_WEB_TEST = 9999;</code>
     */
    GENERATOR_WEB_TEST(9999),
    /**
     * <pre>
     **
     * 下游服务 task-worker 10000-19999
     * </pre>
     *
     * <code>WORKER = 10000;</code>
     */
    WORKER(10000),
    /**
     * <pre>
     **
     *  导航联动仿真
     * </pre>
     *
     * <code>WORKER_SIMULATION = 10001;</code>
     */
    WORKER_SIMULATION(10001),
    /**
     * <pre>
     **
     *  SD抓取
     * </pre>
     *
     * <code>WORKER_SD_OBTAIN = 10002;</code>
     */
    WORKER_SD_OBTAIN(10002),
    /**
     * <pre>
     **
     * 车道线标记识别
     * </pre>
     *
     * <code>WORKER_LANE_MARKING = 10003;</code>
     */
    WORKER_LANE_MARKING(10003),
    /**
     * <pre>
     **
     *单趟雷达SLAM
     * </pre>
     *
     * <code>WORKER_SINGLEPASS_LIDAR_SLAM = 10004;</code>
     */
    WORKER_SINGLEPASS_LIDAR_SLAM(10004),
    /**
     * <pre>
     **
     *资料解算
     * </pre>
     *
     * <code>WORKER_CAR_DATA_ETL = 10005;</code>
     */
    WORKER_CAR_DATA_ETL(10005),
    /**
     * <pre>
     **
     * SD抓取限速
     * </pre>
     *
     * <code>WORKER_SD_OBTAIN_SPEED_LIMIT = 10006;</code>
     */
    WORKER_SD_OBTAIN_SPEED_LIMIT(10006),
    /**
     * <pre>
     **
     * SD抓取事件
     * </pre>
     *
     * <code>WORKER_SD_OBTAIN_EVENT = 10007;</code>
     */
    WORKER_SD_OBTAIN_EVENT(10007),
    /**
     * <pre>
     **
     * 多程雷达SLAM
     * </pre>
     *
     * <code>WORKER_MULTIPASS_LIDAR_SLAM = 10008;</code>
     */
    WORKER_MULTIPASS_LIDAR_SLAM(10008),
    /**
     * <pre>
     **
     * 用于WEB测试
     * </pre>
     *
     * <code>WORKER_WEB_TEST = 19999;</code>
     */
    WORKER_WEB_TEST(19999),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     **
     * 上游服务 task-generator 1-9999
     * </pre>
     *
     * <code>GENERATOR = 0;</code>
     */
    public static final int GENERATOR_VALUE = 0;
    /**
     * <pre>
     **
     * 产线任务生产者
     * </pre>
     *
     * <code>GENERATOR_PIPELINE = 1;</code>
     */
    public static final int GENERATOR_PIPELINE_VALUE = 1;
    /**
     * <pre>
     **
     *单趟雷达SLAM
     * </pre>
     *
     * <code>GENERATOR_SINGLEPASS_LIDAR_SLAM = 2;</code>
     */
    public static final int GENERATOR_SINGLEPASS_LIDAR_SLAM_VALUE = 2;
    /**
     * <pre>
     **
     * 用于WEB测试
     * </pre>
     *
     * <code>GENERATOR_WEB_TEST = 9999;</code>
     */
    public static final int GENERATOR_WEB_TEST_VALUE = 9999;
    /**
     * <pre>
     **
     * 下游服务 task-worker 10000-19999
     * </pre>
     *
     * <code>WORKER = 10000;</code>
     */
    public static final int WORKER_VALUE = 10000;
    /**
     * <pre>
     **
     *  导航联动仿真
     * </pre>
     *
     * <code>WORKER_SIMULATION = 10001;</code>
     */
    public static final int WORKER_SIMULATION_VALUE = 10001;
    /**
     * <pre>
     **
     *  SD抓取
     * </pre>
     *
     * <code>WORKER_SD_OBTAIN = 10002;</code>
     */
    public static final int WORKER_SD_OBTAIN_VALUE = 10002;
    /**
     * <pre>
     **
     * 车道线标记识别
     * </pre>
     *
     * <code>WORKER_LANE_MARKING = 10003;</code>
     */
    public static final int WORKER_LANE_MARKING_VALUE = 10003;
    /**
     * <pre>
     **
     *单趟雷达SLAM
     * </pre>
     *
     * <code>WORKER_SINGLEPASS_LIDAR_SLAM = 10004;</code>
     */
    public static final int WORKER_SINGLEPASS_LIDAR_SLAM_VALUE = 10004;
    /**
     * <pre>
     **
     *资料解算
     * </pre>
     *
     * <code>WORKER_CAR_DATA_ETL = 10005;</code>
     */
    public static final int WORKER_CAR_DATA_ETL_VALUE = 10005;
    /**
     * <pre>
     **
     * SD抓取限速
     * </pre>
     *
     * <code>WORKER_SD_OBTAIN_SPEED_LIMIT = 10006;</code>
     */
    public static final int WORKER_SD_OBTAIN_SPEED_LIMIT_VALUE = 10006;
    /**
     * <pre>
     **
     * SD抓取事件
     * </pre>
     *
     * <code>WORKER_SD_OBTAIN_EVENT = 10007;</code>
     */
    public static final int WORKER_SD_OBTAIN_EVENT_VALUE = 10007;
    /**
     * <pre>
     **
     * 多程雷达SLAM
     * </pre>
     *
     * <code>WORKER_MULTIPASS_LIDAR_SLAM = 10008;</code>
     */
    public static final int WORKER_MULTIPASS_LIDAR_SLAM_VALUE = 10008;
    /**
     * <pre>
     **
     * 用于WEB测试
     * </pre>
     *
     * <code>WORKER_WEB_TEST = 19999;</code>
     */
    public static final int WORKER_WEB_TEST_VALUE = 19999;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static GrpcInstanceTypeEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static GrpcInstanceTypeEnum forNumber(int value) {
      switch (value) {
        case 0: return GENERATOR;
        case 1: return GENERATOR_PIPELINE;
        case 2: return GENERATOR_SINGLEPASS_LIDAR_SLAM;
        case 9999: return GENERATOR_WEB_TEST;
        case 10000: return WORKER;
        case 10001: return WORKER_SIMULATION;
        case 10002: return WORKER_SD_OBTAIN;
        case 10003: return WORKER_LANE_MARKING;
        case 10004: return WORKER_SINGLEPASS_LIDAR_SLAM;
        case 10005: return WORKER_CAR_DATA_ETL;
        case 10006: return WORKER_SD_OBTAIN_SPEED_LIMIT;
        case 10007: return WORKER_SD_OBTAIN_EVENT;
        case 10008: return WORKER_MULTIPASS_LIDAR_SLAM;
        case 19999: return WORKER_WEB_TEST;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<GrpcInstanceTypeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        GrpcInstanceTypeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<GrpcInstanceTypeEnum>() {
            public GrpcInstanceTypeEnum findValueByNumber(int number) {
              return GrpcInstanceTypeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.solano.grpc.common.enumeration.Enum.getDescriptor().getEnumTypes().get(1);
    }

    private static final GrpcInstanceTypeEnum[] VALUES = values();

    public static GrpcInstanceTypeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private GrpcInstanceTypeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.solano.grpc.common.enumeration.GrpcInstanceTypeEnum)
  }

  /**
   * <pre>
   **
   * 任务来源的枚举类型
   * </pre>
   *
   * Protobuf enum {@code com.solano.grpc.common.enumeration.GrpcTaskSourceEnum}
   */
  public enum GrpcTaskSourceEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     **
     * 未知
     * </pre>
     *
     * <code>UNKNOWN_SOURCE = 0;</code>
     */
    UNKNOWN_SOURCE(0),
    /**
     * <pre>
     **
     * Jira
     * </pre>
     *
     * <code>JIRA = 1;</code>
     */
    JIRA(1),
    /**
     * <pre>
     **
     * 影子模式
     * </pre>
     *
     * <code>SHADOW_MODE = 2;</code>
     */
    SHADOW_MODE(2),
    /**
     * <pre>
     **
     * HDMap reverse
     * </pre>
     *
     * <code>HD_MAP_REVERSE = 3;</code>
     */
    HD_MAP_REVERSE(3),
    /**
     * <pre>
     **
     * 导航联动仿真
     * </pre>
     *
     * <code>NAVIGATION_LINKAGE_SIMULATION = 4;</code>
     */
    NAVIGATION_LINKAGE_SIMULATION(4),
    /**
     * <pre>
     **
     * SD限速获取
     * </pre>
     *
     * <code>SD_SPEED_LIMIT_RETRIEVAL = 5;</code>
     */
    SD_SPEED_LIMIT_RETRIEVAL(5),
    /**
     * <pre>
     **
     * SD交通事故
     * </pre>
     *
     * <code>SD_TRAFFIC_ACCIDENT = 6;</code>
     */
    SD_TRAFFIC_ACCIDENT(6),
    /**
     * <pre>
     **
     * 产线流程节点
     * </pre>
     *
     * <code>PRODUCTION_LINE_PROCESS_NODE = 7;</code>
     */
    PRODUCTION_LINE_PROCESS_NODE(7),
    /**
     * <pre>
     **
     * 手动提交
     * </pre>
     *
     * <code>MANUAL_SUBMISSION = 8;</code>
     */
    MANUAL_SUBMISSION(8),
    /**
     * <pre>
     **
     * 数据采集
     * </pre>
     *
     * <code>DATA_ACQUISITION = 9;</code>
     */
    DATA_ACQUISITION(9),
    /**
     * <pre>
     **
     * 车端变化发现
     * </pre>
     *
     * <code>CAR_CHANGE_FIND = 10;</code>
     */
    CAR_CHANGE_FIND(10),
    /**
     * <pre>
     **
     * 云端变化发现
     * </pre>
     *
     * <code>CLOUD_CHANGE_FIND = 11;</code>
     */
    CLOUD_CHANGE_FIND(11),
    /**
     * <pre>
     **
     * 多次融合
     * </pre>
     *
     * <code>MULTIPLE_FUSION = 12;</code>
     */
    MULTIPLE_FUSION(12),
    /**
     * <pre>
     **
     * 人工录入
     * </pre>
     *
     * <code>MANUAL_ENTRY = 13;</code>
     */
    MANUAL_ENTRY(13),
    /**
     * <pre>
     **
     * 产线内部节点
     * </pre>
     *
     * <code>PIPELINE_INTERNAL = 14;</code>
     */
    PIPELINE_INTERNAL(14),
    /**
     * <pre>
     **
     * 采集区域
     * </pre>
     *
     * <code>COLLECTION_AREA = 15;</code>
     */
    COLLECTION_AREA(15),
    /**
     * <pre>
     **
     * 编译团队对接来源
     * </pre>
     *
     * <code>COMPILATION_SERVE = 16;</code>
     */
    COMPILATION_SERVE(16),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     **
     * 未知
     * </pre>
     *
     * <code>UNKNOWN_SOURCE = 0;</code>
     */
    public static final int UNKNOWN_SOURCE_VALUE = 0;
    /**
     * <pre>
     **
     * Jira
     * </pre>
     *
     * <code>JIRA = 1;</code>
     */
    public static final int JIRA_VALUE = 1;
    /**
     * <pre>
     **
     * 影子模式
     * </pre>
     *
     * <code>SHADOW_MODE = 2;</code>
     */
    public static final int SHADOW_MODE_VALUE = 2;
    /**
     * <pre>
     **
     * HDMap reverse
     * </pre>
     *
     * <code>HD_MAP_REVERSE = 3;</code>
     */
    public static final int HD_MAP_REVERSE_VALUE = 3;
    /**
     * <pre>
     **
     * 导航联动仿真
     * </pre>
     *
     * <code>NAVIGATION_LINKAGE_SIMULATION = 4;</code>
     */
    public static final int NAVIGATION_LINKAGE_SIMULATION_VALUE = 4;
    /**
     * <pre>
     **
     * SD限速获取
     * </pre>
     *
     * <code>SD_SPEED_LIMIT_RETRIEVAL = 5;</code>
     */
    public static final int SD_SPEED_LIMIT_RETRIEVAL_VALUE = 5;
    /**
     * <pre>
     **
     * SD交通事故
     * </pre>
     *
     * <code>SD_TRAFFIC_ACCIDENT = 6;</code>
     */
    public static final int SD_TRAFFIC_ACCIDENT_VALUE = 6;
    /**
     * <pre>
     **
     * 产线流程节点
     * </pre>
     *
     * <code>PRODUCTION_LINE_PROCESS_NODE = 7;</code>
     */
    public static final int PRODUCTION_LINE_PROCESS_NODE_VALUE = 7;
    /**
     * <pre>
     **
     * 手动提交
     * </pre>
     *
     * <code>MANUAL_SUBMISSION = 8;</code>
     */
    public static final int MANUAL_SUBMISSION_VALUE = 8;
    /**
     * <pre>
     **
     * 数据采集
     * </pre>
     *
     * <code>DATA_ACQUISITION = 9;</code>
     */
    public static final int DATA_ACQUISITION_VALUE = 9;
    /**
     * <pre>
     **
     * 车端变化发现
     * </pre>
     *
     * <code>CAR_CHANGE_FIND = 10;</code>
     */
    public static final int CAR_CHANGE_FIND_VALUE = 10;
    /**
     * <pre>
     **
     * 云端变化发现
     * </pre>
     *
     * <code>CLOUD_CHANGE_FIND = 11;</code>
     */
    public static final int CLOUD_CHANGE_FIND_VALUE = 11;
    /**
     * <pre>
     **
     * 多次融合
     * </pre>
     *
     * <code>MULTIPLE_FUSION = 12;</code>
     */
    public static final int MULTIPLE_FUSION_VALUE = 12;
    /**
     * <pre>
     **
     * 人工录入
     * </pre>
     *
     * <code>MANUAL_ENTRY = 13;</code>
     */
    public static final int MANUAL_ENTRY_VALUE = 13;
    /**
     * <pre>
     **
     * 产线内部节点
     * </pre>
     *
     * <code>PIPELINE_INTERNAL = 14;</code>
     */
    public static final int PIPELINE_INTERNAL_VALUE = 14;
    /**
     * <pre>
     **
     * 采集区域
     * </pre>
     *
     * <code>COLLECTION_AREA = 15;</code>
     */
    public static final int COLLECTION_AREA_VALUE = 15;
    /**
     * <pre>
     **
     * 编译团队对接来源
     * </pre>
     *
     * <code>COMPILATION_SERVE = 16;</code>
     */
    public static final int COMPILATION_SERVE_VALUE = 16;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static GrpcTaskSourceEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static GrpcTaskSourceEnum forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_SOURCE;
        case 1: return JIRA;
        case 2: return SHADOW_MODE;
        case 3: return HD_MAP_REVERSE;
        case 4: return NAVIGATION_LINKAGE_SIMULATION;
        case 5: return SD_SPEED_LIMIT_RETRIEVAL;
        case 6: return SD_TRAFFIC_ACCIDENT;
        case 7: return PRODUCTION_LINE_PROCESS_NODE;
        case 8: return MANUAL_SUBMISSION;
        case 9: return DATA_ACQUISITION;
        case 10: return CAR_CHANGE_FIND;
        case 11: return CLOUD_CHANGE_FIND;
        case 12: return MULTIPLE_FUSION;
        case 13: return MANUAL_ENTRY;
        case 14: return PIPELINE_INTERNAL;
        case 15: return COLLECTION_AREA;
        case 16: return COMPILATION_SERVE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<GrpcTaskSourceEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        GrpcTaskSourceEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<GrpcTaskSourceEnum>() {
            public GrpcTaskSourceEnum findValueByNumber(int number) {
              return GrpcTaskSourceEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.solano.grpc.common.enumeration.Enum.getDescriptor().getEnumTypes().get(2);
    }

    private static final GrpcTaskSourceEnum[] VALUES = values();

    public static GrpcTaskSourceEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private GrpcTaskSourceEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.solano.grpc.common.enumeration.GrpcTaskSourceEnum)
  }

  /**
   * <pre>
   **
   * 任务批次状态的枚举类型
   * </pre>
   *
   * Protobuf enum {@code com.solano.grpc.common.enumeration.GrpcTaskBatchStatusEnum}
   */
  public enum GrpcTaskBatchStatusEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     **
     * 传输中
     * </pre>
     *
     * <code>TRANSFERRING = 0;</code>
     */
    TRANSFERRING(0),
    /**
     * <pre>
     **
     * 未开始
     * </pre>
     *
     * <code>NOT_STARTED = 1;</code>
     */
    NOT_STARTED(1),
    /**
     * <pre>
     **
     * 执行中
     * </pre>
     *
     * <code>IN_PROGRESS = 2;</code>
     */
    IN_PROGRESS(2),
    /**
     * <pre>
     **
     * 完成
     * </pre>
     *
     * <code>COMPLETED = 3;</code>
     */
    COMPLETED(3),
    /**
     * <pre>
     **
     * 终止
     * </pre>
     *
     * <code>TERMINATED = 4;</code>
     */
    TERMINATED(4),
    /**
     * <pre>
     **
     * 删除
     * </pre>
     *
     * <code>DELETED = 5;</code>
     */
    DELETED(5),
    /**
     * <pre>
     **
     * 主动取消
     * </pre>
     *
     * <code>CANCELED = 6;</code>
     */
    CANCELED(6),
    /**
     * <pre>
     **
     * 尝试取消
     * </pre>
     *
     * <code>TRY_CANCEL = 7;</code>
     */
    TRY_CANCEL(7),
    /**
     * <pre>
     **
     * 尝试终止
     * </pre>
     *
     * <code>TRY_ABORT = 8;</code>
     */
    TRY_ABORT(8),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     **
     * 传输中
     * </pre>
     *
     * <code>TRANSFERRING = 0;</code>
     */
    public static final int TRANSFERRING_VALUE = 0;
    /**
     * <pre>
     **
     * 未开始
     * </pre>
     *
     * <code>NOT_STARTED = 1;</code>
     */
    public static final int NOT_STARTED_VALUE = 1;
    /**
     * <pre>
     **
     * 执行中
     * </pre>
     *
     * <code>IN_PROGRESS = 2;</code>
     */
    public static final int IN_PROGRESS_VALUE = 2;
    /**
     * <pre>
     **
     * 完成
     * </pre>
     *
     * <code>COMPLETED = 3;</code>
     */
    public static final int COMPLETED_VALUE = 3;
    /**
     * <pre>
     **
     * 终止
     * </pre>
     *
     * <code>TERMINATED = 4;</code>
     */
    public static final int TERMINATED_VALUE = 4;
    /**
     * <pre>
     **
     * 删除
     * </pre>
     *
     * <code>DELETED = 5;</code>
     */
    public static final int DELETED_VALUE = 5;
    /**
     * <pre>
     **
     * 主动取消
     * </pre>
     *
     * <code>CANCELED = 6;</code>
     */
    public static final int CANCELED_VALUE = 6;
    /**
     * <pre>
     **
     * 尝试取消
     * </pre>
     *
     * <code>TRY_CANCEL = 7;</code>
     */
    public static final int TRY_CANCEL_VALUE = 7;
    /**
     * <pre>
     **
     * 尝试终止
     * </pre>
     *
     * <code>TRY_ABORT = 8;</code>
     */
    public static final int TRY_ABORT_VALUE = 8;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static GrpcTaskBatchStatusEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static GrpcTaskBatchStatusEnum forNumber(int value) {
      switch (value) {
        case 0: return TRANSFERRING;
        case 1: return NOT_STARTED;
        case 2: return IN_PROGRESS;
        case 3: return COMPLETED;
        case 4: return TERMINATED;
        case 5: return DELETED;
        case 6: return CANCELED;
        case 7: return TRY_CANCEL;
        case 8: return TRY_ABORT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<GrpcTaskBatchStatusEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        GrpcTaskBatchStatusEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<GrpcTaskBatchStatusEnum>() {
            public GrpcTaskBatchStatusEnum findValueByNumber(int number) {
              return GrpcTaskBatchStatusEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.solano.grpc.common.enumeration.Enum.getDescriptor().getEnumTypes().get(3);
    }

    private static final GrpcTaskBatchStatusEnum[] VALUES = values();

    public static GrpcTaskBatchStatusEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private GrpcTaskBatchStatusEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.solano.grpc.common.enumeration.GrpcTaskBatchStatusEnum)
  }

  /**
   * <pre>
   **
   * 任务状态的枚举类型
   * </pre>
   *
   * Protobuf enum {@code com.solano.grpc.common.enumeration.GrpcTaskStatusEnum}
   */
  public enum GrpcTaskStatusEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     **
     * 传输中
     * </pre>
     *
     * <code>TASK_TRANSFERRING = 0;</code>
     */
    TASK_TRANSFERRING(0),
    /**
     * <pre>
     **
     * 未开始
     * </pre>
     *
     * <code>TASK_NOT_STARTED = 1;</code>
     */
    TASK_NOT_STARTED(1),
    /**
     * <pre>
     **
     * 进行中
     * </pre>
     *
     * <code>TASK_IN_PROGRESS = 2;</code>
     */
    TASK_IN_PROGRESS(2),
    /**
     * <pre>
     **
     * 完成
     * </pre>
     *
     * <code>TASK_COMPLETED = 3;</code>
     */
    TASK_COMPLETED(3),
    /**
     * <pre>
     **
     * 异常终止
     * </pre>
     *
     * <code>TASK_TERMINATION = 4;</code>
     */
    TASK_TERMINATION(4),
    /**
     * <pre>
     **
     * 主动取消
     * </pre>
     *
     * <code>TASK_CANCELED = 5;</code>
     */
    TASK_CANCELED(5),
    /**
     * <pre>
     **
     * 删除
     * </pre>
     *
     * <code>TASK_DELETED = 6;</code>
     */
    TASK_DELETED(6),
    /**
     * <pre>
     **
     * 异常重试
     * </pre>
     *
     * <code>TASK_RETRY = 7;</code>
     */
    TASK_RETRY(7),
    /**
     * <pre>
     **
     * 尝试取消
     * </pre>
     *
     * <code>TASK_TRY_CANCEL = 8;</code>
     */
    TASK_TRY_CANCEL(8),
    /**
     * <pre>
     **
     * 尝试终止
     * </pre>
     *
     * <code>TASK_TRY_ABORT = 9;</code>
     */
    TASK_TRY_ABORT(9),
    /**
     * <pre>
     **
     * 已被拆分
     * </pre>
     *
     * <code>TASK_SPLIT = 10;</code>
     */
    TASK_SPLIT(10),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     **
     * 传输中
     * </pre>
     *
     * <code>TASK_TRANSFERRING = 0;</code>
     */
    public static final int TASK_TRANSFERRING_VALUE = 0;
    /**
     * <pre>
     **
     * 未开始
     * </pre>
     *
     * <code>TASK_NOT_STARTED = 1;</code>
     */
    public static final int TASK_NOT_STARTED_VALUE = 1;
    /**
     * <pre>
     **
     * 进行中
     * </pre>
     *
     * <code>TASK_IN_PROGRESS = 2;</code>
     */
    public static final int TASK_IN_PROGRESS_VALUE = 2;
    /**
     * <pre>
     **
     * 完成
     * </pre>
     *
     * <code>TASK_COMPLETED = 3;</code>
     */
    public static final int TASK_COMPLETED_VALUE = 3;
    /**
     * <pre>
     **
     * 异常终止
     * </pre>
     *
     * <code>TASK_TERMINATION = 4;</code>
     */
    public static final int TASK_TERMINATION_VALUE = 4;
    /**
     * <pre>
     **
     * 主动取消
     * </pre>
     *
     * <code>TASK_CANCELED = 5;</code>
     */
    public static final int TASK_CANCELED_VALUE = 5;
    /**
     * <pre>
     **
     * 删除
     * </pre>
     *
     * <code>TASK_DELETED = 6;</code>
     */
    public static final int TASK_DELETED_VALUE = 6;
    /**
     * <pre>
     **
     * 异常重试
     * </pre>
     *
     * <code>TASK_RETRY = 7;</code>
     */
    public static final int TASK_RETRY_VALUE = 7;
    /**
     * <pre>
     **
     * 尝试取消
     * </pre>
     *
     * <code>TASK_TRY_CANCEL = 8;</code>
     */
    public static final int TASK_TRY_CANCEL_VALUE = 8;
    /**
     * <pre>
     **
     * 尝试终止
     * </pre>
     *
     * <code>TASK_TRY_ABORT = 9;</code>
     */
    public static final int TASK_TRY_ABORT_VALUE = 9;
    /**
     * <pre>
     **
     * 已被拆分
     * </pre>
     *
     * <code>TASK_SPLIT = 10;</code>
     */
    public static final int TASK_SPLIT_VALUE = 10;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static GrpcTaskStatusEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static GrpcTaskStatusEnum forNumber(int value) {
      switch (value) {
        case 0: return TASK_TRANSFERRING;
        case 1: return TASK_NOT_STARTED;
        case 2: return TASK_IN_PROGRESS;
        case 3: return TASK_COMPLETED;
        case 4: return TASK_TERMINATION;
        case 5: return TASK_CANCELED;
        case 6: return TASK_DELETED;
        case 7: return TASK_RETRY;
        case 8: return TASK_TRY_CANCEL;
        case 9: return TASK_TRY_ABORT;
        case 10: return TASK_SPLIT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<GrpcTaskStatusEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        GrpcTaskStatusEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<GrpcTaskStatusEnum>() {
            public GrpcTaskStatusEnum findValueByNumber(int number) {
              return GrpcTaskStatusEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.solano.grpc.common.enumeration.Enum.getDescriptor().getEnumTypes().get(4);
    }

    private static final GrpcTaskStatusEnum[] VALUES = values();

    public static GrpcTaskStatusEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private GrpcTaskStatusEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.solano.grpc.common.enumeration.GrpcTaskStatusEnum)
  }

  /**
   * <pre>
   **
   * 实例连接状态的枚举类型
   * </pre>
   *
   * Protobuf enum {@code com.solano.grpc.common.enumeration.GrpcInstanceConnectionStatusEnum}
   */
  public enum GrpcInstanceConnectionStatusEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     **
     * 未知
     * </pre>
     *
     * <code>UNKNOWN_CON_STATUS = 0;</code>
     */
    UNKNOWN_CON_STATUS(0),
    /**
     * <pre>
     **
     * 已连接
     * </pre>
     *
     * <code>CONNECTED = 1;</code>
     */
    CONNECTED(1),
    /**
     * <pre>
     **
     * 过渡状态：健康检查异常，准备下线中
     * </pre>
     *
     * <code>TIDYING = 2;</code>
     */
    TIDYING(2),
    /**
     * <pre>
     **
     * 已断开连接
     * </pre>
     *
     * <code>DISCONNECTED = 3;</code>
     */
    DISCONNECTED(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     **
     * 未知
     * </pre>
     *
     * <code>UNKNOWN_CON_STATUS = 0;</code>
     */
    public static final int UNKNOWN_CON_STATUS_VALUE = 0;
    /**
     * <pre>
     **
     * 已连接
     * </pre>
     *
     * <code>CONNECTED = 1;</code>
     */
    public static final int CONNECTED_VALUE = 1;
    /**
     * <pre>
     **
     * 过渡状态：健康检查异常，准备下线中
     * </pre>
     *
     * <code>TIDYING = 2;</code>
     */
    public static final int TIDYING_VALUE = 2;
    /**
     * <pre>
     **
     * 已断开连接
     * </pre>
     *
     * <code>DISCONNECTED = 3;</code>
     */
    public static final int DISCONNECTED_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static GrpcInstanceConnectionStatusEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static GrpcInstanceConnectionStatusEnum forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_CON_STATUS;
        case 1: return CONNECTED;
        case 2: return TIDYING;
        case 3: return DISCONNECTED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<GrpcInstanceConnectionStatusEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        GrpcInstanceConnectionStatusEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<GrpcInstanceConnectionStatusEnum>() {
            public GrpcInstanceConnectionStatusEnum findValueByNumber(int number) {
              return GrpcInstanceConnectionStatusEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.solano.grpc.common.enumeration.Enum.getDescriptor().getEnumTypes().get(5);
    }

    private static final GrpcInstanceConnectionStatusEnum[] VALUES = values();

    public static GrpcInstanceConnectionStatusEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private GrpcInstanceConnectionStatusEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.solano.grpc.common.enumeration.GrpcInstanceConnectionStatusEnum)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\021common/enum.proto\022\"com.solano.grpc.com" +
      "mon.enumeration*:\n\023GrpcServiceTypeEnum\022\022" +
      "\n\016TASK_GENERATOR\020\000\022\017\n\013TASK_WORKER\020\001*\207\003\n\024" +
      "GrpcInstanceTypeEnum\022\r\n\tGENERATOR\020\000\022\026\n\022G" +
      "ENERATOR_PIPELINE\020\001\022#\n\037GENERATOR_SINGLEP" +
      "ASS_LIDAR_SLAM\020\002\022\027\n\022GENERATOR_WEB_TEST\020\217" +
      "N\022\013\n\006WORKER\020\220N\022\026\n\021WORKER_SIMULATION\020\221N\022\025" +
      "\n\020WORKER_SD_OBTAIN\020\222N\022\030\n\023WORKER_LANE_MAR" +
      "KING\020\223N\022!\n\034WORKER_SINGLEPASS_LIDAR_SLAM\020" +
      "\224N\022\030\n\023WORKER_CAR_DATA_ETL\020\225N\022!\n\034WORKER_S" +
      "D_OBTAIN_SPEED_LIMIT\020\226N\022\033\n\026WORKER_SD_OBT" +
      "AIN_EVENT\020\227N\022 \n\033WORKER_MULTIPASS_LIDAR_S" +
      "LAM\020\230N\022\025\n\017WORKER_WEB_TEST\020\237\234\001*\226\003\n\022GrpcTa" +
      "skSourceEnum\022\022\n\016UNKNOWN_SOURCE\020\000\022\010\n\004JIRA" +
      "\020\001\022\017\n\013SHADOW_MODE\020\002\022\022\n\016HD_MAP_REVERSE\020\003\022" +
      "!\n\035NAVIGATION_LINKAGE_SIMULATION\020\004\022\034\n\030SD" +
      "_SPEED_LIMIT_RETRIEVAL\020\005\022\027\n\023SD_TRAFFIC_A" +
      "CCIDENT\020\006\022 \n\034PRODUCTION_LINE_PROCESS_NOD" +
      "E\020\007\022\025\n\021MANUAL_SUBMISSION\020\010\022\024\n\020DATA_ACQUI" +
      "SITION\020\t\022\023\n\017CAR_CHANGE_FIND\020\n\022\025\n\021CLOUD_C" +
      "HANGE_FIND\020\013\022\023\n\017MULTIPLE_FUSION\020\014\022\020\n\014MAN" +
      "UAL_ENTRY\020\r\022\025\n\021PIPELINE_INTERNAL\020\016\022\023\n\017CO" +
      "LLECTION_AREA\020\017\022\025\n\021COMPILATION_SERVE\020\020*\246" +
      "\001\n\027GrpcTaskBatchStatusEnum\022\020\n\014TRANSFERRI" +
      "NG\020\000\022\017\n\013NOT_STARTED\020\001\022\017\n\013IN_PROGRESS\020\002\022\r" +
      "\n\tCOMPLETED\020\003\022\016\n\nTERMINATED\020\004\022\013\n\007DELETED" +
      "\020\005\022\014\n\010CANCELED\020\006\022\016\n\nTRY_CANCEL\020\007\022\r\n\tTRY_" +
      "ABORT\020\010*\357\001\n\022GrpcTaskStatusEnum\022\025\n\021TASK_T" +
      "RANSFERRING\020\000\022\024\n\020TASK_NOT_STARTED\020\001\022\024\n\020T" +
      "ASK_IN_PROGRESS\020\002\022\022\n\016TASK_COMPLETED\020\003\022\024\n" +
      "\020TASK_TERMINATION\020\004\022\021\n\rTASK_CANCELED\020\005\022\020" +
      "\n\014TASK_DELETED\020\006\022\016\n\nTASK_RETRY\020\007\022\023\n\017TASK" +
      "_TRY_CANCEL\020\010\022\022\n\016TASK_TRY_ABORT\020\t\022\016\n\nTAS" +
      "K_SPLIT\020\n*h\n GrpcInstanceConnectionStatu" +
      "sEnum\022\026\n\022UNKNOWN_CON_STATUS\020\000\022\r\n\tCONNECT" +
      "ED\020\001\022\013\n\007TIDYING\020\002\022\020\n\014DISCONNECTED\020\003b\006pro" +
      "to3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
